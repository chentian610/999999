<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="parentMap">

	<!--插入表kt_bas_parent -->
	<insert id="insertParent" parameterType="ParentVO">insert into
		kt_bas_parent
		(
		parent_id,
		user_id,
		school_id,
		grade_id,
		class_id,
		head_url,
		class_name,
		phone,
		parent_name,
		<if test="all_letter!=null and all_letter!=''">
		all_letter,
		first_letter,
		</if>
		student_id,
		student_code,
		student_name,
		student_sex,
		relation,
		create_by,
		create_date,
		version
		) VALUES (
		#{parent_id},
		#{user_id},
		#{school_id},
		#{grade_id},
		#{class_id},
		#{head_url},
		#{class_name},
		#{phone},
		#{parent_name},
		<if test="all_letter!=null and all_letter!=''">
		#{all_letter},
		#{first_letter},
		</if>
		#{student_id},
		#{student_code},
		#{student_name},
		#{student_sex},
		#{relation},
		#{create_by},
		#{create_date},
		0
		)
	</insert>

	<!--更新表kt_bas_parent -->
	<update id="updateParent" parameterType="ParentVO">
		update kt_bas_parent
		set 
		<if test="relation!=null and relation!='' ">
			relation = #{relation},
		</if>
		<if test="head_url!=null and head_url!='' ">
			head_url=#{head_url},
		</if>
		<if test="student_sex!=null">
		 student_sex=#{student_sex},
		</if>
		student_code = #{student_code},
		update_by=#{update_by},
		update_date=#{update_date},
		version=version+1 
		where student_code=#{student_code} and user_id=#{user_id} and school_id=#{school_id}
	</update>

	<!--查询表kt_bas_parent -->
	<select id="getParentList" parameterType="ParentVO" resultType="ParentVO">
		select
		parent_id as parent_id,
		user_id as user_id,
		school_id as school_id,
		grade_id as grade_id,
		class_id as class_id,
		class_name as class_name,
		phone as phone,
		student_id as student_id,
		parent_name as parent_name,
		student_code as student_code,
		student_name as student_name,
		student_sex as student_sex,
		relation as relation,
		version as version,
		head_url as head_url
		from kt_bas_parent
		<where> 
		<if test="user_id!=null and user_id!=0">
		user_id=#{user_id}
		</if>
		<if test="student_code!=null and student_code!='' ">
			and student_code=#{student_code}
		</if>
		<if test="school_id!=null and school_id!=0">
			and school_id=#{school_id}
		</if>
		<if test="phone!=null and phone!=''">
			and phone=#{phone}
		</if>
		<if test="student_id!=null and student_id!=0">
		 and student_id=#{student_id}
		</if>
		</where>
	</select>

	<!--根据年级、班级获取家长user列表 -->
	<select id="getParUserList" parameterType="ParentVO" resultType="ParentVO">
		select
		parent_id as parent_id,
		user_id as user_id,
		school_id as school_id,
		grade_id as grade_id,
		class_id as class_id,
		class_name as class_name,
		phone as phone,
		parent_name as parent_name,
		first_letter as first_letter,
		all_letter as all_letter,
		student_id as student_id,
		student_code as student_code,
		student_name as student_name,
		student_sex as student_sex,
		relation as relation,
		version as version,
		head_url as head_url
		from kt_bas_parent
		<where> 
		<if test="school_id !=null and school_id != 0">
		 school_id=#{school_id}
		</if>
		<if test="grade_id!=null and grade_id!=0">
		 and grade_id=#{grade_id}
		</if>
		<if test="class_id!=null and class_id!=0">
		 and class_id=#{class_id}
		</if>
		<if test="student_id!=null and student_id!=0">
		 and student_id=#{student_id}
		</if>
		<if test="parent_name !=null and parent_name != '' ">
		 and (parent_name like CONCAT('%',#{parent_name},'%') 
		 		or first_letter like CONCAT(#{parent_name},'%')
		 		or all_letter like CONCAT(#{parent_name},'%'))
		</if>
		<if test="phone !=null and phone != '' ">
		 and phone like CONCAT(#{phone}, '%')
		</if>
		</where>
	</select>

	<!--删除表kt_bas_parent -->
	<delete id="deleteParent" parameterType="Integer">delete from
		kt_bas_parent
		where parent_id = #{parent_id}
	</delete>
	
	<!-- 更新表kt_bas_parent -->
	<update id="updateParentName" parameterType="ParentVO">
		update kt_bas_parent
		set 
		<if test="parent_name != null and parent_name != '' ">
			parent_name = #{parent_name}, 
		</if> 
		<if test="head_url != null and head_url != '' ">
			head_url = #{head_url}, 
		</if>
		<if test="phone!=null and phone!=''">
			phone=#{phone},
		</if>
		<if test="all_letter!=null and all_letter!=''">
			all_letter=#{all_letter},
		</if>
		<if test="first_letter!=null and first_letter!=''">
			first_letter=#{first_letter},
		</if>
		update_by=#{update_by},
		update_date=#{update_date},
		version=version+1
	 	where user_id=#{user_id}
	</update>
	
	<!-- 更新表kt_bas_parent -->
	<update id="updateClassname" parameterType="ClassVO">
		update kt_bas_parent set 
		<if test="class_name!=null and class_name!=''">
		class_name=#{class_name},
		</if>
		update_by=#{update_by},update_date=#{update_date},
		version=version+1 where class_id=#{class_id}
	</update>
	
	<!-- 更新表kt_bas_parent -->
	<update id="updateAllParents" parameterType="ParentVO">
		update kt_bas_parent set 
		<if test="head_url!=null and head_url!='' ">
			head_url=#{head_url},
		</if>
		<if test="student_sex!=null">
		 student_sex=#{student_sex},
		</if>
		update_by=#{update_by},
		update_date=#{update_date},
		version=version+1 where student_code=#{student_code} and school_id=#{school_id}
	</update>
	
	<!-- 更新表kt_bas_parent -->
	<update id="updateParentUserID" parameterType="UserVO">
		update kt_bas_parent set user_id=#{user_id},head_url=#{head_url} where phone=#{phone} and (user_id=0 or user_id is null)
	</update>
	
	<!-- 修改手机号 -->
	<update id="updateParentPhone" parameterType="UserVO">
		update kt_bas_parent set phone=#{phone},update_by=#{update_by},update_date=#{update_date},
		version=version+1 where user_id=#{user_id}
	</update>
	
	<select id="getParentListOfManager" parameterType="Integer" resultType="String">
		select distinct phone from kt_bas_parent where school_id=#{school_id}
	</select>
	
	
	<update id="updateParentOfManager" parameterType="ParentVO">
		update kt_bas_parent set 
		<if test="grade_id!=null  and grade_id!=0">
			grade_id=#{grade_id},
		</if>
		<if test="class_id!=null and class_id!=0">
			class_id=#{class_id},
			class_name=#{class_name},
		</if>
		<if test="student_code!=null and student_code!=''">
			student_code=#{student_code},
		</if>
		<if test="student_name!=null and student_name!=''">
			student_name=#{student_name},
		</if>
		<if test="student_sex!=null">
			student_sex=#{student_sex},
		</if>
		update_by=#{update_by},update_date=#{update_date},version=version+1 where student_id=#{student_id} and 
		school_id=#{school_id}
	</update>
	
	<delete id="deleteAllParent" parameterType="ParentVO">
	delete from kt_bas_parent where student_code=#{student_code} and school_id=#{school_id}
	</delete>
	
	<update id="updateRelation" parameterType="ParentVO">
	update kt_bas_parent set 
	<if test="relation!=null and relation!=''">
	relation=#{relation},
	</if>
	<if test="parent_name!=null and parent_name!=''">
	parent_name=#{parent_name},
	all_letter=#{all_letter},
	first_letter=#{first_letter},
	</if>
	<if test="phone!=null and phone!=''">
	phone=#{phone},
	</if>
	update_by=#{update_by},update_date=#{update_date},version=version+1 where
	 parent_id=#{parent_id}
	</update>
	
	<select id="getParentById" parameterType="ParentVO" resultType="ParentVO">
	select user_id from kt_bas_parent where parent_id=#{parent_id}
	</select>
	
	<delete id="deleteByClassid" parameterType="Integer">
		delete from kt_bas_parent where class_id=#{class_id}
	</delete>
	
	<select id="getParent" parameterType="ParentVO" resultType="ParentVO">
		select parent_name from kt_bas_parent where school_id=#{school_id} and phone=#{phone}
	</select>
</mapper>

