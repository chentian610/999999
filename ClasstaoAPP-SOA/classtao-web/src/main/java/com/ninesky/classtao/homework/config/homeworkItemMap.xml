<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="homeworkItemMap">
	<!--插入表kt_bus_homework_item-->
	<insert id="insertHomeworkItem" parameterType="HomeworkItemVO">
	insert into	kt_bus_homework_item
		(
		homework_id,
		title,
		content,
		create_by,
		create_date,
		version
		) VALUES (
		#{homework_id},
		#{title},
		#{content},
		#{create_by},
		#{create_date},
		0
		)</insert>
	<!--更新表kt_bus_homework_item-->
	<update id="updateHomeworkItem" parameterType="HomeworkItemVO">
	update
		kt_bus_homework_item
		set item_id = #{item_id},
		homework_id = #{homework_id},
		title = #{title},
		content = #{content},
		version = #{version}
	</update>
	<!--查询表kt_bus_homework_item-->
	<select id="getHomeworkItemList" parameterType="Map"
		resultType="HomeworkItemVO">
	select
		item_id as item_id,
		homework_id as homework_id,
		title as title,
		content as content,
		create_by as create_by,
		create_date as create_date,
		update_by as update_by,
		update_date as update_date,
		version as version
	from kt_bus_homework_item
	where homework_id=#{homework_id}
		<if test="app_sql != null and app_sql != '' ">    
            and item_id  ${app_sql}  
        </if>
        <if test="order_sql != null and order_sql != '' ">    
            order by item_id ${order_sql}  
        </if> 
        </select>
        
      	<!--查询表kt_bus_homework_item-->
	<select id="getHomeworkItemListByMap" parameterType="Map"
		resultType="HomeworkReceiveVO">
	select
		item_id as item_id,
		homework_id as homework_id,
		title as title,
		content as content,
		create_by as create_by,
		create_date as create_date,
		update_by as update_by,
		update_date as update_date,
		version as version
	from kt_bus_homework_item h
	where EXISTS 
	(SELECT 1 FROM kt_bus_homework_group g,kt_bas_student s 
		WHERE s.student_id = #{student_id} AND g.team_id=s.class_id 
			AND h.homework_id=g.homework_id)
		<if test="app_sql != null and app_sql != '' ">    
            and item_id  ${app_sql}  
        </if>
        <if test="order_sql != null and order_sql != '' ">    
            order by item_id ${order_sql}  
        </if> 
        </select>
    <!-- 根据homework_id获取子项列表 -->
    <select id="getItemListByHomeworkId" parameterType="Integer" 
    	resultType="HomeworkItemVO">
   select
   		item_id as item_id,
		homework_id as homework_id,
		title as title,
		content as content,
		update_date as update_date
	from kt_bus_homework_item item
	where homework_id=#{homework_id}
    </select>
        <!-- 根据homework_id获取子项列表 -->
    <select id="getItemDoneByID" parameterType="HomeworkVO" 
    	resultType="HomeworkItemVO">
    select
   		item_id as item_id,
		homework_id as homework_id,
		title as title,
		content as content,
		update_date as update_date
	from kt_bus_homework_item item
	where homework_id=#{homework_id}
    </select>
	<!--删除表kt_bus_homework_item-->
	<delete id="deleteHomeworkItem" parameterType="HomeworkItemVO">
	delete from	kt_bus_homework_item where id = #{id}
	</delete>
	<select id="getCountByHomeworkID" parameterType="HomeworkReceiveVO" 
    	resultType="CountVO">
    SELECT COUNT(*) AS count,
   		(SELECT COUNT(*) FROM kt_bus_homework_item_done WHERE homework_id =#{homework_id} AND student_id=#{student_id}) AS count_done 
    FROM kt_bus_homework_item where homework_id =#{homework_id}
    </select>
      <select id="getItemContentByID" parameterType="Integer" 	resultType="String">
		SELECT content as content
		FROM kt_bus_homework_item
		WHERE item_id = (select min(t.item_id) from kt_bus_homework_item t where t.homework_id=#{homework_id})
    </select>
</mapper>

