<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.springframework.org/schema/beans" xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
	   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
	   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.ninesky" />
	<!-- 开启定时任务
	<task:annotation-driven /> -->

	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.databaseURL}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialPoolSize" value="2" />
		<property name="maxIdleTime" value="30" />
		<property name="maxPoolSize" value="100" />
		<property name="minPoolSize" value="2" />
		<property name="maxStatements" value="200" />
	</bean>

	<!--以下是将Mybatis注入到通用Dao中 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatisframework.xml" />
		<property name="mapperLocations"
			value="classpath*:com/ninesky/**/config/*.xml" />
	</bean>
	<!--ibatis升级到mybatis后，sqlMapClient也升级到 SqlSessionTemplate CTH -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
		<!-- Redis和缓存配置开始 -->
	 <!-- jedis 配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
          <property name="maxIdle" value="${redis.maxIdle}" />
          <property name="maxWaitMillis" value="${redis.maxWait}" />
          <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean >
    
    <!-- redis服务器中心 -->
    <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
          <property name="poolConfig" ref="poolConfig" />
          <property name="port" value="${redis.port}" />
          <property name="hostName" value="${redis.host}" />
          <property name="password" value="${redis.password}" />
          <property name="timeout" value="${redis.timeout}" ></property>
    </bean >
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
          <property name="connectionFactory" ref="connectionFactory" />
          <property name="keySerializer" >
              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
          </property>
          <property name="valueSerializer" >
              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
          </property>
		  <property name="hashKeySerializer">  
		        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
		  </property>  
		  <property name="hashValueSerializer">  
		        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
		  </property> 
    </bean >
    
    
 	<bean name="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>
    
	  <!-- Redis和缓存配置结束 -->
	
	<!-- mongoDB 
	<context:property-placeholder location="classpath:mongodb.properties" />

	<bean id="mongo" class="org.springframework.data.document.mongodb.MongoFactoryBean">
		<property name="host" value="${db.host}" />
		<property name="port" value="${db.port}"></property>
	</bean>

	<bean id="mongoTemplate" class="org.springframework.data.document.mongodb.MongoTemplate">
		<constructor-arg ref="mongo" />
		<constructor-arg name="databaseName" value="${db.database}" />
		<constructor-arg name="defaultCollectionName" value="${db.collection}" />
	</bean>
	-->

	<!-- JDBC事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

  	<!-- 配置事务特性 -->
  	<tx:advice id="txAdvice" transaction-manager="transactionManager">
   	 <tx:attributes>
        <tx:method name="*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="RuntimeException"/>
    </tx:attributes>
  </tx:advice> 

	<aop:config>
	       <aop:pointcut id="txPointcut" expression="execution(* com.ninesky.classtao.*.service.*.*(..))" />
	       <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
</beans>